/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tobin
 */
public class MainFrame extends javax.swing.JFrame {

    // ID of the room where this local machine is running
    public static final int ROOM_ID = 2;
    
    // USER_ID of currently logged-in user
    public int currentUser = -1;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        jLabel4.setVisible(false);
        tabbedPane.setEnabled(false);
        label_Instructor_Error.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        panel_Welcome = new javax.swing.JPanel();
        textField_Welcome_Email = new javax.swing.JTextField();
        textField_Welcome_Password = new javax.swing.JTextField();
        label_Welcome_Email = new javax.swing.JLabel();
        label_Welcome_Password = new javax.swing.JLabel();
        button_Welcome_Login = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        panel_Student = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_Student_Attendence = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_Student_Absence = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        label_Student_Status = new javax.swing.JLabel();
        label_Student_StudentName = new javax.swing.JLabel();
        label_Student_ClassName = new javax.swing.JLabel();
        button_Student_LogOut = new javax.swing.JButton();
        label_Student_Date = new javax.swing.JLabel();
        panel_Instructor = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_Instructor_Absence = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        button_Instructor_Remove = new javax.swing.JButton();
        combo_Instructor_FilterCourse = new javax.swing.JComboBox<>();
        combo_Instructor_FilterStudent = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        combo_Instructor_SelectCourse = new javax.swing.JComboBox<>();
        combo_Instructor_SelectStudent = new javax.swing.JComboBox<>();
        button_Instructor_Save = new javax.swing.JButton();
        button_Instructor_LogOut = new javax.swing.JButton();
        text_Instructor_Date = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        label_Instructor_Error = new javax.swing.JLabel();
        panel_Admin = new javax.swing.JPanel();
        button_Instructor_LogOut2 = new javax.swing.JButton();
        panel_Test = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        panel_Test_StudentList = new javax.swing.JScrollPane();
        table_Test_StudentList = new javax.swing.JTable();
        button_Test_Refresh = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        button_Instructor_LogOut1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        label_Welcome_Email.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        label_Welcome_Email.setText("School Email");

        label_Welcome_Password.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        label_Welcome_Password.setText("Password");

        button_Welcome_Login.setText("Log In");
        button_Welcome_Login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_Welcome_LoginActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 51, 51));
        jLabel4.setText("Invalid Login");

        javax.swing.GroupLayout panel_WelcomeLayout = new javax.swing.GroupLayout(panel_Welcome);
        panel_Welcome.setLayout(panel_WelcomeLayout);
        panel_WelcomeLayout.setHorizontalGroup(
            panel_WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_WelcomeLayout.createSequentialGroup()
                .addGap(273, 273, 273)
                .addGroup(panel_WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_Welcome_Email, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label_Welcome_Password, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(panel_WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(button_Welcome_Login, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textField_Welcome_Email)
                    .addComponent(textField_Welcome_Password, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(357, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_WelcomeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(393, 393, 393))
        );
        panel_WelcomeLayout.setVerticalGroup(
            panel_WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_WelcomeLayout.createSequentialGroup()
                .addGap(209, 209, 209)
                .addGroup(panel_WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_Welcome_Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_Welcome_Email))
                .addGap(18, 18, 18)
                .addGroup(panel_WelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_Welcome_Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_Welcome_Password))
                .addGap(18, 18, 18)
                .addComponent(button_Welcome_Login)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(218, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Welcome", panel_Welcome);

        table_Student_Attendence.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Record ID", "Date", "Student ID", "Class ID"
            }
        ));
        jScrollPane1.setViewportView(table_Student_Attendence);

        jLabel6.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel6.setText("Attendence Record");

        jLabel7.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel7.setText("Absence Record");

        table_Student_Absence.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Record ID", "Date", "Class ID", "Student ID"
            }
        ));
        jScrollPane2.setViewportView(table_Student_Absence);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        label_Student_Status.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        label_Student_Status.setText("Your attendence has been recorded.");

        label_Student_StudentName.setFont(new java.awt.Font("Trebuchet MS", 0, 16)); // NOI18N
        label_Student_StudentName.setText("Student Name");

        label_Student_ClassName.setFont(new java.awt.Font("Trebuchet MS", 0, 16)); // NOI18N
        label_Student_ClassName.setText("Class Name");

        button_Student_LogOut.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        button_Student_LogOut.setText("Log Out");
        button_Student_LogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_Student_LogOutActionPerformed(evt);
            }
        });

        label_Student_Date.setFont(new java.awt.Font("Trebuchet MS", 0, 16)); // NOI18N
        label_Student_Date.setText("12/31/2021");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_Student_Status)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addComponent(button_Student_LogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 15, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_Student_StudentName)
                            .addComponent(label_Student_ClassName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(label_Student_Date)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_Student_Status)
                .addGap(54, 54, 54)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(label_Student_StudentName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_Student_ClassName))
                    .addComponent(label_Student_Date))
                .addGap(18, 18, 18)
                .addComponent(button_Student_LogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panel_StudentLayout = new javax.swing.GroupLayout(panel_Student);
        panel_Student.setLayout(panel_StudentLayout);
        panel_StudentLayout.setHorizontalGroup(
            panel_StudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_StudentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_StudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_StudentLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_StudentLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panel_StudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_StudentLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(206, 206, 206))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_StudentLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(217, 217, 217))
        );
        panel_StudentLayout.setVerticalGroup(
            panel_StudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_StudentLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_StudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        tabbedPane.addTab("Student", panel_Student);

        table_Instructor_Absence.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Record ID", "Date", "Class ID", "Student ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(table_Instructor_Absence);
        if (table_Instructor_Absence.getColumnModel().getColumnCount() > 0) {
            table_Instructor_Absence.getColumnModel().getColumn(0).setResizable(false);
            table_Instructor_Absence.getColumnModel().getColumn(1).setResizable(false);
            table_Instructor_Absence.getColumnModel().getColumn(2).setResizable(false);
            table_Instructor_Absence.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel8.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabel8.setText("Absence Records For Your Classes");

        button_Instructor_Remove.setForeground(new java.awt.Color(255, 51, 51));
        button_Instructor_Remove.setText("Remove Record");
        button_Instructor_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_Instructor_RemoveActionPerformed(evt);
            }
        });

        combo_Instructor_FilterCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Filter by Course Name" }));

        combo_Instructor_FilterStudent.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Filter by Student Name" }));

        jLabel9.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabel9.setText("Record New Absence");

        combo_Instructor_SelectCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a Course" }));

        combo_Instructor_SelectStudent.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a Student" }));

        button_Instructor_Save.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        button_Instructor_Save.setText("Save");
        button_Instructor_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_Instructor_SaveActionPerformed(evt);
            }
        });

        button_Instructor_LogOut.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        button_Instructor_LogOut.setText("Log Out");
        button_Instructor_LogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_Instructor_LogOutActionPerformed(evt);
            }
        });

        text_Instructor_Date.setText("2021-12-30");

        jLabel1.setText("Enter Date");

        label_Instructor_Error.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        label_Instructor_Error.setForeground(new java.awt.Color(255, 51, 51));
        label_Instructor_Error.setText("Invalid Data");

        javax.swing.GroupLayout panel_InstructorLayout = new javax.swing.GroupLayout(panel_Instructor);
        panel_Instructor.setLayout(panel_InstructorLayout);
        panel_InstructorLayout.setHorizontalGroup(
            panel_InstructorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_InstructorLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(panel_InstructorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_InstructorLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addGap(132, 132, 132))
                    .addGroup(panel_InstructorLayout.createSequentialGroup()
                        .addGroup(panel_InstructorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_InstructorLayout.createSequentialGroup()
                                .addGroup(panel_InstructorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(button_Instructor_LogOut, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(button_Instructor_Save, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
                                .addGap(108, 108, 108))
                            .addGroup(panel_InstructorLayout.createSequentialGroup()
                                .addGroup(panel_InstructorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panel_InstructorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(combo_Instructor_SelectCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(combo_Instructor_SelectStudent, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(text_Instructor_Date)
                                        .addGroup(panel_InstructorLayout.createSequentialGroup()
                                            .addGap(24, 24, 24)
                                            .addComponent(jLabel1)))
                                    .addGroup(panel_InstructorLayout.createSequentialGroup()
                                        .addGap(45, 45, 45)
                                        .addComponent(label_Instructor_Error)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(panel_InstructorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_InstructorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(button_Instructor_Remove, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addGroup(panel_InstructorLayout.createSequentialGroup()
                                .addComponent(combo_Instructor_FilterCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(131, 131, 131)
                                .addComponent(combo_Instructor_FilterStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        panel_InstructorLayout.setVerticalGroup(
            panel_InstructorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_InstructorLayout.createSequentialGroup()
                .addContainerGap(62, Short.MAX_VALUE)
                .addGroup(panel_InstructorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(panel_InstructorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_Instructor_FilterCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_Instructor_FilterStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_InstructorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panel_InstructorLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_Instructor_Remove)
                        .addGap(15, 15, 15))
                    .addGroup(panel_InstructorLayout.createSequentialGroup()
                        .addComponent(combo_Instructor_SelectCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(combo_Instructor_SelectStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(text_Instructor_Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(button_Instructor_Save)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_Instructor_Error)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(button_Instructor_LogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(112, 112, 112))))
        );

        tabbedPane.addTab("Instructor", panel_Instructor);

        button_Instructor_LogOut2.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        button_Instructor_LogOut2.setText("Log Out");
        button_Instructor_LogOut2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_Instructor_LogOut2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_AdminLayout = new javax.swing.GroupLayout(panel_Admin);
        panel_Admin.setLayout(panel_AdminLayout);
        panel_AdminLayout.setHorizontalGroup(
            panel_AdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_AdminLayout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(button_Instructor_LogOut2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(625, 625, 625))
        );
        panel_AdminLayout.setVerticalGroup(
            panel_AdminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_AdminLayout.createSequentialGroup()
                .addContainerGap(370, Short.MAX_VALUE)
                .addComponent(button_Instructor_LogOut2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(145, 145, 145))
        );

        tabbedPane.addTab("Admin", panel_Admin);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("This page is used to test features");

        table_Test_StudentList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "First Name", "Last Name", "Email", "Account Type"
            }
        ));
        panel_Test_StudentList.setViewportView(table_Test_StudentList);

        button_Test_Refresh.setText("Refresh");
        button_Test_Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_Test_RefreshActionPerformed(evt);
            }
        });

        jLabel3.setText("Display list of students");

        button_Instructor_LogOut1.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        button_Instructor_LogOut1.setText("Log Out");
        button_Instructor_LogOut1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_Instructor_LogOut1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_TestLayout = new javax.swing.GroupLayout(panel_Test);
        panel_Test.setLayout(panel_TestLayout);
        panel_TestLayout.setHorizontalGroup(
            panel_TestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_TestLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_TestLayout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(button_Instructor_LogOut1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(86, 86, 86)
                .addGroup(panel_TestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_TestLayout.createSequentialGroup()
                        .addComponent(button_Test_Refresh)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3))
                    .addComponent(panel_Test_StudentList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(90, 90, 90))
        );
        panel_TestLayout.setVerticalGroup(
            panel_TestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_TestLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(panel_TestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_Test_Refresh)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_TestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_TestLayout.createSequentialGroup()
                        .addComponent(panel_Test_StudentList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_TestLayout.createSequentialGroup()
                        .addComponent(button_Instructor_LogOut1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(95, 95, 95))))
        );

        tabbedPane.addTab("Test", panel_Test);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_Test_RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_Test_RefreshActionPerformed
        fillTable(table_Test_StudentList, "SELECT * FROM USER");
    }//GEN-LAST:event_button_Test_RefreshActionPerformed

    private void button_Welcome_LoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_Welcome_LoginActionPerformed
        String email = textField_Welcome_Email.getText();
        String pass = textField_Welcome_Password.getText();
        
        //Check for empty input
        if(email.equals("") || pass.equals("")){
            System.out.println("Invalid Login Info");
            jLabel4.setVisible(true);
            return;
        }
        
        String query = "SELECT * FROM USER WHERE USER_EMAIL = ? AND USER_PASSWORD = ?";
        
        try{
            Connection connection = createConnection();
            if(connection == null){
                System.out.println("ERROR: Connection Failed");
            } else {
                System.out.println("Successfully Connected to DB");
            }
            PreparedStatement stat = connection.prepareStatement(query);
            stat.setString(1, email);
            stat.setString(2, pass);
            ResultSet rs = stat.executeQuery();

            // Validate login info
            if (rs.next()){
                System.out.println("Successfully logged in");
                jLabel4.setVisible(false);
                currentUser = rs.getInt(1);
                
                // Clear login fields
                textField_Welcome_Email.setText("");
                textField_Welcome_Password.setText("");
                
                // Switch to correct tab
                String userRole = rs.getString(5);
                if(userRole.equals("STUDENT")){
                    String name = rs.getString(2) + " " +  rs.getString(3);
                    label_Student_StudentName.setText(name);
                    label_Student_Status.setText("Processing Attendence...");
                    tabbedPane.setSelectedIndex(1);
                    panel_StudentFocusGained();
                } else if (userRole.equals("INSTRUCTOR")){
                    tabbedPane.setSelectedIndex(2);
                    panel_InstructorFocusGained();
                } else if (userRole.equals("ADMIN")){
                    tabbedPane.setSelectedIndex(4);
                }
                
                
            } else {
                System.out.println("Invalid Login Info");
                jLabel4.setVisible(true);
            }

        rs.close();
        stat.close();
        connection.close();
        }
        catch(SQLException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_button_Welcome_LoginActionPerformed

    private void panel_InstructorFocusGained(){
        fillTable(table_Instructor_Absence, "SELECT * FROM ABSENCERECORDS WHERE RECORD_CLASSID IN " +
            "(SELECT CLASS_ID FROM CLASS WHERE CLASS_INSTRUCTORID = ?)", currentUser);
        
        // Get course list
        String query = "SELECT CLASS_ID, CLASS_CODE FROM CLASS WHERE CLASS_INSTRUCTORID = ?";
        try{
            Connection connection = createConnection();
            if(connection == null){
                System.out.println("ERROR: Connection Failed");
            } else {
                System.out.println("Successfully Connected to DB");
            }
            PreparedStatement stat = connection.prepareStatement(query);
            stat.setInt(1, currentUser);
            ResultSet rs = stat.executeQuery();
            
            DefaultComboBoxModel model = (DefaultComboBoxModel) combo_Instructor_SelectCourse.getModel();
            while(rs.next()){
                String temp = "";
                temp += rs.getInt(1) + ", ";
                temp += rs.getString(2);
                model.addElement(temp);
            }

        rs.close();
        stat.close();
        connection.close();
        }
        catch(SQLException e){
            e.printStackTrace();
        }
        
        // Get student list
        query = "SELECT DISTINCT ENROLLMENT_STUDENTID FROM ENROLLMENT WHERE ENROLLMENT_CLASSID IN "
                + "(SELECT CLASS_ID FROM CLASS WHERE CLASS_INSTRUCTORID = ?)";
        try{
            Connection connection = createConnection();
            if(connection == null){
                System.out.println("ERROR: Connection Failed");
            } else {
                System.out.println("Successfully Connected to DB");
            }
            PreparedStatement stat = connection.prepareStatement(query);
            stat.setInt(1, currentUser);
            ResultSet rs = stat.executeQuery();
            
            DefaultComboBoxModel model = (DefaultComboBoxModel) combo_Instructor_SelectStudent.getModel();
            while(rs.next()){
                model.addElement(rs.getInt(1));
            }

        rs.close();
        stat.close();
        connection.close();
        }
        catch(SQLException e){
            e.printStackTrace();
        }
    }
    
    private void panel_StudentFocusGained(){
        String date = "" + java.time.LocalDate.now();
        label_Student_Date.setText(date);
        
        // Populate tables
        fillTable(table_Student_Attendence, "SELECT * FROM ATTENDENCERECORDS WHERE RECORD_STUDENTID = ?", currentUser);
        fillTable(table_Student_Absence, "SELECT * FROM ABSENCERECORDS WHERE RECORD_STUDENTID = ?", currentUser);
        
        // Insert Attendence Record
        // Fetch student class list
        List<Integer> classList = new ArrayList<Integer>();
        String query = "SELECT ENROLLMENT_CLASSID FROM ENROLLMENT WHERE ENROLLMENT_STUDENTID = ?";
        try{
            Connection connection = createConnection();
            if(connection == null){
                System.out.println("ERROR: Connection Failed");
            } else {
                System.out.println("Successfully Connected to DB");
            }
            PreparedStatement stat = connection.prepareStatement(query);
            stat.setInt(1, currentUser);
            ResultSet rs = stat.executeQuery();
            
            while(rs.next()){  
                classList.add(rs.getInt(1));
            }

        rs.close();
        stat.close();
        connection.close();
        }
        catch(SQLException e){
            e.printStackTrace();
        }
        
        // Check for active class in current room
        String currentDay = getDay();
        
        for(int classID : classList){
            query = "SELECT CLASS_DAYS, CLASS_CODE, CLASS_ROOMID FROM CLASS "
                    + "WHERE (CLASS_ID = ?) AND (NOW() BETWEEN CLASS_BEGINTIME AND CLASS_ENDTIME)";
            try{
                Connection connection = createConnection();
                if(connection == null){
                    System.out.println("ERROR: Connection Failed");
                } else {
                    System.out.println("Successfully Connected to DB");
                }
                PreparedStatement stat = connection.prepareStatement(query);
                stat.setInt(1, classID);
                ResultSet rs = stat.executeQuery();
                
                if(rs.next() != false){
                    String days = rs.getString(1);
                    String classCode = rs.getString(2);
                    int roomID = rs.getInt(3);
                
                
                    // Check if room ID matches
                    if(roomID == ROOM_ID){
                        // Check if day matches
                        if(days.contains(currentDay)){
                            // Check for duplicate entry
                            if(true){
                                // No duplicate entry, insert new attendence record
                                query = "INSERT INTO ATTENDENCERECORDS (RECORD_DATE, RECORD_STUDENTID, RECORD_CLASSID) "
                                        + "VALUES (CURDATE(), ?, ?)";
                                stat = connection.prepareStatement(query);
                                stat.setInt(1, currentUser);
                                stat.setInt(2, classID);
                                stat.executeUpdate();
                                label_Student_Status.setText("Your attendence has been recorded.");
                                label_Student_ClassName.setText(classCode);
                                fillTable(table_Student_Attendence, "SELECT * FROM ATTENDENCERECORDS WHERE RECORD_STUDENTID = ?", currentUser);
                                return;
                            }
                        }
                    }
                    rs.close();
                    stat.close();
                    connection.close();
                }
            }
            catch(SQLException e){
                e.printStackTrace();
            }
        }
        // No Current Classes
        System.out.println("You have no current classes. Attendence won't be recorded.");
        label_Student_Status.setText("No active classes.");
    }
    
    private String getDay(){
        String day = LocalDate.now().getDayOfWeek().name();
        if(day.toLowerCase().equals("thursday")){
            return "u";
        }
        return "" + day.charAt(0);
    }
    
    private void logOut(){
        // Update currentUser global variable
        currentUser = -1;
        
        // Switch to welcome page
        tabbedPane.setSelectedIndex(0);
        
        System.out.println("Successfully logged out");
    }
    
    private void button_Student_LogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_Student_LogOutActionPerformed
        logOut();
    }//GEN-LAST:event_button_Student_LogOutActionPerformed

    private void button_Instructor_LogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_Instructor_LogOutActionPerformed
        logOut();
    }//GEN-LAST:event_button_Instructor_LogOutActionPerformed

    private void button_Instructor_LogOut1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_Instructor_LogOut1ActionPerformed
        logOut();
    }//GEN-LAST:event_button_Instructor_LogOut1ActionPerformed

    private void button_Instructor_LogOut2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_Instructor_LogOut2ActionPerformed
        logOut();
    }//GEN-LAST:event_button_Instructor_LogOut2ActionPerformed

    private void button_Instructor_RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_Instructor_RemoveActionPerformed
        int row = table_Instructor_Absence.getSelectedRow();
        int recordID = Integer.parseInt(table_Instructor_Absence.getModel().getValueAt(row, 0).toString());
        int input = JOptionPane.showConfirmDialog(null, "Remove this record?");
        if(input != 0){
            System.out.println("Cancelled. Not removing a record.");
            return;
        }
        
        String query = "DELETE FROM ABSENCERECORDS WHERE RECORD_ID = ?";
        try{
            Connection connection = createConnection();
            if(connection == null){
                System.out.println("ERROR: Connection Failed");
            } else {
                System.out.println("Successfully Connected to DB");
            }
            PreparedStatement stat = connection.prepareStatement(query);
            stat.setInt(1, recordID);
            stat.executeUpdate();
            System.out.println("Absence record of ID " + recordID + " removed.");
            fillTable(table_Instructor_Absence, "SELECT * FROM ABSENCERECORDS WHERE RECORD_CLASSID IN " +
            "(SELECT CLASS_ID FROM CLASS WHERE CLASS_INSTRUCTORID = ?)", currentUser);
            stat.close();
            connection.close();
        } catch(SQLException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_button_Instructor_RemoveActionPerformed

    private void button_Instructor_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_Instructor_SaveActionPerformed
        String selectedCourse = combo_Instructor_SelectCourse.getSelectedItem().toString();
        String selectedStudent = combo_Instructor_SelectStudent.getSelectedItem().toString();
        String date = text_Instructor_Date.getText();
        
        // Verify Course
        if(selectedCourse.equals("Select a Course")){
            label_Instructor_Error.setVisible(true);
            return;
        }
        
        // Verify Student
        if(selectedStudent.equals("Select a Student")){
            label_Instructor_Error.setVisible(true);
            return;
        }
        
        // Verify Date
        if(!date.matches("\\d{4}-\\d{2}-\\d{2}")){
            label_Instructor_Error.setVisible(true);
            return;
        }
        
        label_Instructor_Error.setVisible(false);
        
        // Parse ClassID and selectedStudent
        String ID = "";
        for(int i = 0; i < selectedCourse.length(); i++){
            if(selectedCourse.charAt(i) == ','){
                break;
            }
            ID += selectedCourse.charAt(i);
        }
        int classID = Integer.parseInt(ID);
        int student = Integer.parseInt(selectedStudent);
        
        // Insert absence
        String query = "INSERT INTO ABSENCERECORDS (RECORD_DATE, RECORD_CLASSID, RECORD_STUDENTID) "
                + "VALUES (?, ?, ?)";
        try{
            Connection connection = createConnection();
            if(connection == null){
                System.out.println("ERROR: Connection Failed");
            } else {
                System.out.println("Successfully Connected to DB");
            }
            PreparedStatement stat = connection.prepareStatement(query);
            stat.setString(1, date);
            stat.setInt(2, classID);
            stat.setInt(3, student);
            stat.executeUpdate();
            
            stat.close();
            connection.close();
        }
        catch(SQLException e){
            e.printStackTrace();
        }
        fillTable(table_Instructor_Absence, "SELECT * FROM ABSENCERECORDS WHERE RECORD_CLASSID IN " +
            "(SELECT CLASS_ID FROM CLASS WHERE CLASS_INSTRUCTORID = ?)", currentUser);
    }//GEN-LAST:event_button_Instructor_SaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    /**
     * Populates the given table with the results of the provided query
     * @param table
     * @param query 
     */
    private static void fillTable(JTable table, String query){
        try{
            Connection connection = createConnection();
            if(connection == null){
                System.out.println("ERROR: Connection Failed");
            } else {
                System.out.println("Successfully Connected to DB");
            }
            Statement stat = connection.createStatement();
            ResultSet rs = stat.executeQuery(query);

            //To remove previously added rows
            while(table.getRowCount() > 0) 
            {
                ((DefaultTableModel) table.getModel()).removeRow(0);
            }
            int columns = rs.getMetaData().getColumnCount();
            
            while(rs.next()){  
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++)
                {  
                    row[i - 1] = rs.getObject(i);
                }
                ((DefaultTableModel) table.getModel()).insertRow(rs.getRow()-1,row);
            }

        rs.close();
        stat.close();
        connection.close();
        }
        catch(SQLException e){
            e.printStackTrace();
        }
    }
    
    /**
     * Populates the given table with the results of the provided query
     * @param table
     * @param query
     * @param ID student ID for which to fetch results
     */
    private static void fillTable(JTable table, String query, int ID){
        try{
            Connection connection = createConnection();
            if(connection == null){
                System.out.println("ERROR: Connection Failed");
            } else {
                System.out.println("Successfully Connected to DB");
            }
            PreparedStatement stat = connection.prepareStatement(query);
            stat.setInt(1, ID);
            ResultSet rs = stat.executeQuery();

            //To remove previously added rows
            while(table.getRowCount() > 0) 
            {
                ((DefaultTableModel) table.getModel()).removeRow(0);
            }
            int columns = rs.getMetaData().getColumnCount();
            
            while(rs.next()){  
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++)
                {  
                    row[i - 1] = rs.getObject(i);
                }
                ((DefaultTableModel) table.getModel()).insertRow(rs.getRow()-1,row);
            }

        rs.close();
        stat.close();
        connection.close();
        }
        catch(SQLException e){
            e.printStackTrace();
        }
    }
    
    private static Connection createConnection(){
        try {  
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Connection con;
        try {
            con = DriverManager.getConnection("jdbc:mysql://74.117.171.123:3306/CAPSTONE","uacapstone","UAcapstone4");
            return con;
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_Instructor_LogOut;
    private javax.swing.JButton button_Instructor_LogOut1;
    private javax.swing.JButton button_Instructor_LogOut2;
    private javax.swing.JButton button_Instructor_Remove;
    private javax.swing.JButton button_Instructor_Save;
    private javax.swing.JButton button_Student_LogOut;
    private javax.swing.JButton button_Test_Refresh;
    private javax.swing.JButton button_Welcome_Login;
    private javax.swing.JComboBox<String> combo_Instructor_FilterCourse;
    private javax.swing.JComboBox<String> combo_Instructor_FilterStudent;
    private javax.swing.JComboBox<String> combo_Instructor_SelectCourse;
    private javax.swing.JComboBox<String> combo_Instructor_SelectStudent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel label_Instructor_Error;
    private javax.swing.JLabel label_Student_ClassName;
    private javax.swing.JLabel label_Student_Date;
    private javax.swing.JLabel label_Student_Status;
    private javax.swing.JLabel label_Student_StudentName;
    private javax.swing.JLabel label_Welcome_Email;
    private javax.swing.JLabel label_Welcome_Password;
    private javax.swing.JPanel panel_Admin;
    private javax.swing.JPanel panel_Instructor;
    private javax.swing.JPanel panel_Student;
    private javax.swing.JPanel panel_Test;
    private javax.swing.JScrollPane panel_Test_StudentList;
    private javax.swing.JPanel panel_Welcome;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable table_Instructor_Absence;
    private javax.swing.JTable table_Student_Absence;
    private javax.swing.JTable table_Student_Attendence;
    private javax.swing.JTable table_Test_StudentList;
    private javax.swing.JTextField textField_Welcome_Email;
    private javax.swing.JTextField textField_Welcome_Password;
    private javax.swing.JTextField text_Instructor_Date;
    // End of variables declaration//GEN-END:variables
}
